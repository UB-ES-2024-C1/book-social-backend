openapi: 3.0.0
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate a user and return a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                  description: User's email address
                password:
                  type: string
                  format: password
                  example: ValidPass1!
                  description: User's password (min 8 chars, must include uppercase, lowercase, number and special char)
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation failed'
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                      [
                        'Invalid email format',
                        'Password must be at least 8 characters long',
                      ]
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid credentials'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Error logging in'
                  error:
                    type: object
                    description: Error details

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Register a new user in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - username
                - email
                - password
                - genre
              properties:
                firstName:
                  type: string
                  example: 'John'
                  description: User's first name (1-50 chars, letters, spaces, hyphens and apostrophes only)
                lastName:
                  type: string
                  example: 'Doe'
                  description: User's last name (1-50 chars, letters, spaces, hyphens and apostrophes only)
                username:
                  type: string
                  example: 'johndoe'
                  description: User's unique username (3-30 chars, letters, numbers, underscores and dashes only)
                email:
                  type: string
                  format: email
                  example: 'john.doe@example.com'
                  description: User's unique email address (max 255 chars)
                password:
                  type: string
                  format: password
                  example: 'ValidPass1!'
                  description: User's password (8-100 chars, must include uppercase, lowercase, number and special char)
                genre:
                  type: string
                  example: 'Fiction'
                  description: User's preferred literary genre (1-50 chars)
                description:
                  type: string
                  example: 'I love reading books'
                  description: Optional user description (max 1000 chars)
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User registered successfully'
                  userId:
                    type: number
                    example: 1
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation failed'
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                      [
                        'Email already exists',
                        'Username must be at least 3 characters long',
                      ]
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Error registering user'
                  error:
                    type: object
                    description: Error details
  /auth/update:
    patch:
      summary: Update user profile
      description: Updates specific fields of a user's profile.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The first name of the user.
                  example: Josep
                lastName:
                  type: string
                  description: The last name of the user.
                  example: Belmonte
                email:
                  type: string
                  format: email
                  description: The email of the user.
                  example: josep.updated@example.com
                genre:
                  type: string
                  description: Favourite Genre
                  exemple: Fiction
                description:
                  type: string

              required:
                - firstName
                - lastName
                - email
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      firstName:
                        type: string
                        example: Josep
                      lastName:
                        type: string
                        example: Belmonte
                      email:
                        type: string
                        example: josep.updated@example.com
                      role:
                        type: string
                        enum: [reader, writer]
                        example: reader
        '400':
          description: Bad Request - Validation Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                      - 'First name is required'
                      - 'Email must be a valid email address'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred
                  error:
                    type: string
                    example: Database connection failed

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get authenticated user information
      description: Returns the current authenticated user's information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: User's first name
                    example: 'John'
                  email:
                    type: string
                    description: User's email address
                    example: 'john.doe@example.com'
                  description:
                    type: string
                    description: User's description (empty string if not set)
                    example: 'Book lover'
                  id:
                    type: string
                    description: User's ID converted to string
                    example: '1'
                  lastname:
                    type: string
                    description: User's last name
                    example: 'Doe'
                  username:
                    type: string
                    description: User's unique username
                    example: 'johndoe'
                  role:
                    type: string
                    description: User's role in lowercase
                    enum: ['reader', 'writer']
                    example: 'reader'
                  favGenre:
                    type: string
                    description: User's preferred literary genre
                    example: 'fiction'
                  image:
                    type: string
                    description: User's profile image URL (empty for now)
                    example: ''
                  coverImage:
                    type: string
                    description: User's cover image URL (empty for now)
                    example: ''
                  posts:
                    type: array
                    description: User's posts (empty for now)
                    items: {}
                    example: []
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Not authenticated'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Error fetching user data'
                  error:
                    type: string
                    example: 'Error processing user data'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
