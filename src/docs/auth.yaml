openapi: 3.0.0
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate a user and return a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                  description: User's email address
                password:
                  type: string
                  format: password
                  example: ValidPass1!
                  description: User's password (min 8 chars, must include uppercase, lowercase, number and special char)
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message describing the validation failure
                    example: Invalid email format
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: Invalid credentials
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: Error logging in
                  error:
                    type: object
                    description: Error details

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Register a new user in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - username
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: "Pedro"
                  description: User's first name
                lastName:
                  type: string
                  example: "Picapiedra"
                  description: User's last name
                username:
                  type: string
                  example: "pedropicapiedra"
                  description: User's unique username
                email:
                  type: string
                  format: email
                  example: "pedropicapiedra@example.com"
                  description: User's email address
                password:
                  type: string
                  format: password
                  example: "ValidPass1!"
                  description: User's password (min 8 chars, must include uppercase, lowercase, number and special char)
                genre:
                  type: string
                  example: "Science Fiction"
                  description: "User's preferred literary genre"
                description:
                  type: string
                  example: "I love reading and writing science fiction novels..."
                  description: "Optional user description"
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message describing the validation failure
                    example: "Invalid email format"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "User with this email already exists"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Error registering user"
                  error:
                    type: object
                    description: Error details
